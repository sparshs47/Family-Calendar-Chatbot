// App.js
import React, { useState, useEffect, useRef } from 'react';
import './App.css';
import EmojiPicker from 'emoji-picker-react';


import Calendar from 'react-calendar';
import 'react-calendar/dist/Calendar.css';

const App = () => {
  const [events, setEvents] = useState(() => {
    const saved = localStorage.getItem('events');
    return saved ? JSON.parse(saved) : [];
  });
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState('');
  const [eventInput, setEventInput] = useState({ date: '', time: '', reason: '' });
  const [showEmoji, setShowEmoji] = useState(false);
  const [editingEventIndex, setEditingEventIndex] = useState(null);
  const [calendarDate, setCalendarDate] = useState(new Date());
  const recognitionRef = useRef(null);
  const chatEndRef = useRef(null);

  useEffect(() => {
    localStorage.setItem('events', JSON.stringify(events));
  }, [events]);

  useEffect(() => {
    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  useEffect(() => {
    if (!('webkitSpeechRecognition' in window)) return;
    const recognition = new window.webkitSpeechRecognition();
    recognition.continuous = false;
    recognition.interimResults = false;
    recognition.lang = 'en-US';
    recognition.onresult = (e) => {
      const spoken = e.results[0][0].transcript.toLowerCase();
      setInput(spoken);
      processVoiceCommand(spoken);
    };
    recognitionRef.current = recognition;
  }, []);

  useEffect(() => {
    window.speechSynthesis.onvoiceschanged = () => {
      window.speechSynthesis.getVoices();
    };
  }, []);

  const speak = (text) => {
    const utterance = new SpeechSynthesisUtterance(text);
    utterance.lang = 'en-US';
    utterance.pitch = 1;
    utterance.rate = 1;
    utterance.voice = speechSynthesis.getVoices()[0];
    speechSynthesis.speak(utterance);
  };

  const getSmartReply = async (input) => {
    return `You said: "${input}"`;
  };

  const handleSend = async () => {
    if (!input.trim()) return;
    const userMsg = { sender: 'user', text: input };
    setMessages((prev) => [...prev, userMsg]);
    setInput('');

    const reply = await getSmartReply(input);
    const botMsg = { sender: 'bot', text: reply };
    setMessages((prev) => [...prev, botMsg]);
    speak(reply);
  };

  const processVoiceCommand = (spoken) => {
    if (spoken.includes('add event')) {
      speak('Please provide the date, time, and reason.');
    } else if (spoken.includes('list events')) {
      const eventText = events.length ? events.map(e => `${e.date} ${e.time} - ${e.reason}`).join('. ') : 'No events found.';
      setMessages((prev) => [...prev, { sender: 'bot', text: eventText }]);
      speak(eventText);
    } else if (spoken.includes('clear events') || spoken.includes('delete all events')) {
      setEvents([]);
      speak('All events have been cleared.');
    } else if (spoken.includes('search event')) {
      const query = spoken.replace('search event', '').trim();
      const matched = events.filter(e => `${e.date} ${e.time} ${e.reason}`.toLowerCase().includes(query));
      const text = matched.length ? matched.map(e => `${e.date} ${e.time} - ${e.reason}`).join('. ') : 'No matching events found.';
      setMessages((prev) => [...prev, { sender: 'bot', text }]);
      speak(text);
    } else {
      setInput(spoken);
      handleSend();
    }
  };

  const handleEmojiClick = (e, emojiObject) => {
    setInput((prev) => prev + emojiObject.emoji);
  };

  const handleEventSubmit = () => {
    const { date, time, reason } = eventInput;
    if (!date || !time || !reason) return;

    if (editingEventIndex !== null) {
      const updated = [...events];
      updated[editingEventIndex] = { date, time, reason };
      setEvents(updated);
      setEditingEventIndex(null);
    } else {
      setEvents([...events, { date, time, reason }]);
    }
    setEventInput({ date: '', time: '', reason: '' });
  };

  const deleteEvent = (index) => {
    const updated = events.filter((_, i) => i !== index);
    setEvents(updated);
  };

  const editEvent = (index) => {
    setEventInput(events[index]);
    setEditingEventIndex(index);
  };

  const onCalendarClick = (value) => {
    const selectedDate = value.toISOString().split('T')[0];
    setEventInput({ ...eventInput, date: selectedDate });
  };

  return (
    <div className="App family-theme">
      <header>📅 Family Calendar</header>
      <div className="calendar-section">
        <h2>🗓️ Events</h2>
        <Calendar onChange={onCalendarClick} value={calendarDate} />
        <div className="event-form">
          <input
            type="date"
            value={eventInput.date}
            onChange={(e) => setEventInput({ ...eventInput, date: e.target.value })}
          />
          <input
            type="time"
            value={eventInput.time}
            onChange={(e) => setEventInput({ ...eventInput, time: e.target.value })}
          />
          <input
            type="text"
            placeholder="Reason"
            value={eventInput.reason}
            onChange={(e) => setEventInput({ ...eventInput, reason: e.target.value })}
          />
          <button onClick={handleEventSubmit}>{editingEventIndex !== null ? 'Update' : 'Add'}</button>
        </div>

        <ul className="event-list">
          {events.map((event, i) => (
            <li key={i}>
              <strong>{event.date} {event.time}</strong> - {event.reason}
              <button onClick={() => editEvent(i)}>✏️</button>
              <button onClick={() => deleteEvent(i)}>🗑️</button>
            </li>
          ))}
        </ul>
      </div>

      <div className="chat-window">
        {messages.map((msg, i) => (
          <div key={i} className={`message ${msg.sender}`}>
            <div>{msg.text}</div>
          </div>
        ))}
        <div ref={chatEndRef} />
      </div>

      {showEmoji && (
  <div className="emoji-picker">
    <EmojiPicker onEmojiClick={handleEmojiClick} />
  </div>
)}


      <div className="input-area">
        <input
          type="text"
          value={input}
          onChange={(e) => setInput(e.target.value)}
          placeholder="Type something..."
        />
        <button onClick={() => setShowEmoji((prev) => !prev)}>😀</button>
        <button
          onMouseDown={() => recognitionRef.current?.start()}
          onMouseUp={() => recognitionRef.current?.stop()}
        >🎤</button>
        <button onClick={handleSend}>Send</button>
      </div>
    </div>
  );
};

export default App;
